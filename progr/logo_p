{admcab.i new}
def var vv as int.
def var cgc-admcom as char.
def var vreg as char.
def var varquivo as char format "x(15)".
def var varq as char.
def var vetbcod like estab.etbcod.
def var vetb like estab.etbcod.                    
def var vcgc like forne.forcgc.
def var vemite like plani.emite.
def var vnumero like plani.numero.
def var vserie  like plani.serie.
def var vpladat like plani.pladat.
def var vplarec like plani.pladat.
def var vopccod like plani.opccod format "9999".
def var vprotot like plani.protot.
def var vplatot like plani.platot.
def var vbicms like plani.bicms.
def var vicms like plani.icms.
def var vipi  like plani.ipi.
def var vdescprod like plani.descprod.
def var vacfprod like plani.acfprod.
def var voutras like plani.outras.
def var visenta like plani.isenta.


def var vprocod as char format "x(06)".
def var vmovqtm as dec.
def var vmovpc  like movim.movpc.
def var vmovdat like movim.movdat.
def var vmovicms like movim.movicms.
def var vmovpdes like movim.movpdes.
def var vmovdes  like movim.movdes.
def var vmovalicms like movim.movalicms.
def var vmovalipi like movim.movalipi.
def var vmovfre  like movim.movctm.
 

def temp-table tt-movim
    field emite  like forne.forcod
    field numero like plani.numero
    field serie  like plani.serie
    field procod as char format "x(06)"
    field movqtm as dec
    field movdat like movim.movdat
    field movpc  like movim.movpc 
    field movicms like movim.movicms 
    field movpdes like movim.movpdes 
    field movdes  like movim.movdes 
    field movalicms like movim.movalicms 
    field movalipi like movim.movalipi 
    field movfre  like movim.movctm.





def temp-table tt-plani
    field emite like plani.emite 
    field numero like plani.numero 
    field serie  like plani.serie 
    field pladat like plani.pladat 
    field plarec like plani.pladat 
    field opccod like plani.opccod format "9999" 
    field protot like plani.protot 
    field platot like plani.platot 
    field bicms like plani.bicms 
    field icms like plani.icms 
    field ipi  like plani.ipi 
    field descprod like plani.descprod 
    field acfprod like plani.acfprod 
    field outras like plani.outras 
    field isenta like plani.isenta.

def temp-table tt-erro
    field forcgc like forne.forcgc
    field numero like plani.numero
    field serie  like plani.serie
    field pladat like plani.pladat
    field platot like plani.platot.


def temp-table tt-forne
    field forcgc like forne.forcgc
    field forcod like forne.forcod.
    
        
    
repeat:
        
    for each tt-forne:
        delete tt-forne.
    end.    

    for each tt-plani:
        delete tt-plani.
    end.
    
    for each tt-movim:
        delete tt-movim.
    end.    
            
    
    for each tt-erro.
        delete tt-erro.
    end.    
            
     

    vetb = 0.
    update vetb label "Filial" with frame f1 side-label width 80.
    if vetb = 0
    then display "Geral" @ estab.etbnom with frame f1.
    else do:
        find estab where estab.etbcod = vetb no-lock no-error.
        display estab.etbnom no-label with frame f1.
    end.
    
            
    for each forne no-lock:
        if forne.forcgc = ""
        then next.
        
        cgc-admcom = forne.forcgc.
        vv = 0.    
        do vv = 1 to 18:      
            if substring(cgc-admcom,vv,1) = "-" or  
               substring(cgc-admcom,vv,1) = "." or                       
               substring(cgc-admcom,vv,1) = "/" or   
               substring(cgc-admcom,vv,1) = "-"  
            then substring(cgc-admcom,vv,1) = "".  
        end.  
        create tt-forne. 
        assign tt-forne.forcgc = cgc-admcom
               tt-forne.forcod = forne.forcod.
        
    end.    

    
    if opsys = "unix"
    then assign varquivo = "/admcom/logosystem/nf-entrada.txt" 
                varq     = "/admcom/logosystem/nf-entrada-itens.txt".
    else assign varquivo = "l:\logosystem\nf-entrada.txt"
                varq     = "l:\logosystem\nf-entrada-itens.txt".
            
    
    if search(varquivo) = "" or
       search(varq)     = ""
    then do:
        message "Arquivo nao encontrado".
        pause.
        undo, retry.
    end.
    

    message "Importar arquivo: "  varquivo  update sresp.
    if not sresp
    then return.
    

    if opsys = "unix"
    then do:
        unix silent  
        value("quoter -d % " + varquivo + 
              " > /admcom/logosystem/entrada.quo").
        unix silent 
        value("quoter -d % " + varq + 
              " > /admcom/logosystem/entrada-itens.quo").
    end.          
    else do:
        dos silent 
        value("c:\dlc\bin\quoter -d % " + varquivo + 
              " > l:\logosystem\entrada.quo").
        dos silent 
        value("c:\dlc\bin\quoter -d % " + varquivo + 
              " > l:\logosystem\entrada-itens.quo").
    end.
    
    if opsys = "unix"
    then assign varquivo = "/admcom/logosystem/entrada.quo" 
                varq     = "/admcom/logosystem/entrada-itens.quo".
    else assign varquivo = "l:\logosystem\entrada.quo"
                varq     = "l:\logosystem\entrada-itens.quo".
            
       
    input from value(varquivo) no-echo.
    repeat:   
        
        import vreg.
        vcgc    = substring(vreg,1,18).
        vnumero = int(substring(vreg,19,06)).
        vserie  = substring(vreg,25,03).
        vpladat = date(int((substring(vreg,30,2))),
                       int((substring(vreg,28,2))),
                       int((substring(vreg,32,4)))). 
        vplarec = date(int((substring(vreg,38,2))),
                       int((substring(vreg,36,2))),
                       int((substring(vreg,40,4)))). 
        vopccod = int(substring(vreg,44,4)).
        vprotot = dec(substring(vreg,48,16)) / 100.        
        vplatot = dec(substring(vreg,64,16)) / 100.       
        vbicms  = dec(substring(vreg,80,16)) / 100.       
        vicms   = dec(substring(vreg,96,16)) / 100.       
        vipi    = dec(substring(vreg,112,16)) / 100.       
        vdescprod = dec(substring(vreg,128,16)) / 100.       
        vacfprod  = dec(substring(vreg,144,16)) / 100.       
        voutras   = dec(substring(vreg,160,16)) / 100.       
        visenta   = dec(substring(vreg,176,16)) / 100.       


        find first tt-forne where tt-forne.forcgc = vcgc no-error.
        if avail tt-forne
        then find forne where 
                  forne.forcod = tt-forne.forcod no-lock no-error.
        if avail forne
        then do:
            create tt-plani.
            assign tt-plani.emite = forne.forcod
                   tt-plani.numero = vnumero   
                   tt-plani.serie  = vserie   
                   tt-plani.pladat = vpladat   
                   tt-plani.plarec = vpladat   
                   tt-plani.opccod = vopccod 
                   tt-plani.protot = vprotot   
                   tt-plani.platot = vplatot   
                   tt-plani.bicms = vbicms   
                   tt-plani.icms = vicms   
                   tt-plani.ipi  = vipi   
                   tt-plani.descprod = vdescprod   
                   tt-plani.acfprod = vacfprod   
                   tt-plani.outras = voutras   
                   tt-plani.isenta = visenta. 
        end.
        else do:
            create tt-erro.
            assign tt-erro.forcgc = vcgc
                   tt-erro.numero = vnumero  
                   tt-erro.serie  = vserie  
                   tt-erro.pladat = vpladat  
                   tt-erro.platot = vplatot.
        end.
                   
        
        /*
        display vcgc
                forne.forcod when avail forne
                forne.fornom when avail forne
                vnumero(count)
                vserie
                vpladat
                vplarec
                vopccod
                vprotot
                vplatot
                vbicms
                vicms
                vipi
                vdescprod
                vacfprod
                voutras
                visenta. 
          */
    end.    
    input close.

       
    input from value(varq) no-echo.
    repeat:   
        
        import vreg.
        vcgc    = substring(vreg,1,18).
        vnumero = int(substring(vreg,19,06)).
        vserie  = substring(vreg,25,03).
        vmovdat = date(int((substring(vreg,30,2))),
                       int((substring(vreg,28,2))),
                       int((substring(vreg,32,4)))). 
        vprocod  = substring(vreg,36,6).
        vmovqtm  = dec(substring(vreg,42,16)) / 100.
        vmovpc   = dec(substring(vreg,58,16)) / 100. 
        vmovicms = dec(substring(vreg,74,16)) / 100. 
        vmovpdes = dec(substring(vreg,90,08)) / 100. 
        vmovdes  = dec(substring(vreg,98,16)) / 100. 
        vmovalicms = dec(substring(vreg,114,08)) / 100. 
        vmovalipi  = dec(substring(vreg,122,08)) / 100. 
        vmovfre    = dec(substring(vreg,154,16)) / 100.

        
        find first tt-forne where tt-forne.forcgc = vcgc no-error.
        if avail tt-forne
        then find forne where 
                  forne.forcod = tt-forne.forcod no-lock no-error.
        if avail forne
        then do:
            create tt-movim.
            assign tt-movim.emite = forne.forcod
                   tt-movim.numero = vnumero   
                   tt-movim.serie  = vserie   
                   tt-movim.movdat = vmovdat
                   tt-movim.procod = vprocod
                   tt-movim.movqtm = vmovqtm
                   tt-movim.movpc  = vmovpc
                   tt-movim.movicms = vmovicms
                   tt-movim.movpdes = vmovpdes
                   tt-movim.movdes = vmovdes
                   tt-movim.movalicms = vmovalicms
                   tt-movim.movalipi = vmovalipi
                   tt-movim.movfre = vmovfre.
        end.
        
        display vcgc
                forne.forcod when avail forne
                forne.fornom when avail forne
                vnumero(count)
                vserie
                vmovdat
                vprocod
                vmovqtm format "->>>,>>9.99" 
                vmovpc
                vmovicms 
                vmovpdes 
                vmovdes  
                vmovalicms
                vmovalipi 
                vmovfre.   
        
    end.
    input close.
                       

    
    
    
    
   
end.
