{/admcom/progr/portal_host.i}

define temp-table tt-produtos no-undo serialize-name 'produto'
    field tempo-garantia     as int   serialize-name "tempoGarantia"
    field aliquota-icm       as dec   serialize-name "aliquotaICMS"
    field altura-produto     as dec   serialize-name "alturaProduto"
    field ativo              as log   serialize-name "ativo"
    field cod-cat-fiscal     as int   serialize-name "categoriaFiscal"
    field cod-classific-fisc as int   serialize-name "codigoClassificacaoFiscal"
    field cod-barras         as char  serialize-name "codigoBarras"
    field cod-produto        as int   serialize-name "codigoProduto"
    field cod-produto-pai    as char  serialize-name "codigoProdutoPai"
    field cod-cor            as char  serialize-name "codigoCor" 
    field dt-cadastro        as char  serialize-name "dataCadastro"
    field dt-fim-vida        as char  serialize-name "dataFimVida"
    field cod-departamento   as int   serialize-name "codigoDepartamento"
    field descontinuado      as log   serialize-name "descontinuado"
    field desc-produto       as char  serialize-name "descricao"
    field desc-produto-abrev as char  serialize-name "descricaoAbreviada"
    field desc-ecommerce     as char  serialize-name "descricaoeCommerce"
    field cod-estac          as int   serialize-name "codigoEstacao"
    field estoq-minimo       as int   serialize-name "estoqueMinimo"
    field exporta-ecommerce  as log   serialize-name "exportaeCommerce"
    field cod-fabricante     as int   serialize-name "codigoFabricante"
    field largura-produto    as dec   serialize-name "larguraProduto"
    field open-to-buy        as log   serialize-name "openToBuy"
    field cod-pack           as int   serialize-name "pack"
    field montagem           as log   serialize-name "paraMontagem"
    field pedido-especial    as log   serialize-name "pedidoEspecial"
    field peso-produto       as dec   serialize-name "pesoProduto"
    field preco-custo        as dec   serialize-name "precoCusto"
    field preco-venda        as dec   serialize-name "precoVenda"
    field preco-fornecedor   as dec   serialize-name "precoRecomendadoFornecedor"
    field profundidade-prod  as dec   serialize-name "profundidadeProduto"
    field referencia         as char  serialize-name "referencia"
    field cod-subclasse      as int   serialize-name "codigoSubclasse"
    field cod-temp           as int   serialize-name "codigoTemporada"
    field voltagem-produto   as int   serialize-name "voltagem"
    field prazo-pagto        as int   serialize-name "codigoPrazoPagamento"
    field volume             as int   serialize-name "volume".
    
define temp-table tt-caracteristica no-undo serialize-name "caracteristicas"
    field cod-produto       as int  serialize-name "codproduto"
    field caracteristica    as char serialize-name "caracteristica"
    field subcaracteristica as char serialize-name "subCaracteristica".
    
define temp-table tt-mix no-undo serialize-name "listaMixModa"
    field cod-produto as int serialize-name   "codproduto"
    field cod-mix     as int serialize-name   "codigo"
    field estmin      as dec serialize-name   "estoqueMin"
    field estmax      as dec serialize-name   "estoqueMax"
    field ativo       as log serialize-name   "ativo"
    field etbcod      as int serialize-name   "etbcod".
    
define temp-table arquivos
    field arquivo as char.

define temp-table galeria
    field galeria as char.
    
def temp-table tt-erros no-undo
    field cod-target  as int
    field err-message as char.

empty temp-table tt-produtos       no-error.
empty temp-table tt-caracteristica no-error.
empty temp-table tt-mix            no-error.

define dataset produtos serialize-name 'integracao' for tt-produtos, tt-mix, arquivos, galeria, tt-caracteristica.

def var lo-arquivo as longchar no-undo.
def var ch-arquivo as char no-undo.

def var vhSocket   as handle no-undo.
     
def var de-tamanho as dec  no-undo.
def var c-json     as char no-undo.

def var filename as char no-undo.
def var hour 	 as char no-undo.
def var timer 	 as char no-undo.

assign filename = string(day(today), "99") + "_" + string(month(today),"99") + "_" + string(year(today),"9999") + "_" + STRING(TIME, 'HH:MM:SS') + ".log".

output to value("/admcom/logs/portal/" + filename) append.

run logger(input "Inicianto integraÃ§Ã£o produtos"). 

create socket vhSocket.

vhSocket:connect('-H ' + vcHost + ' -S ' + vcPort) no-error.
    
if vhSocket:connected() = false then do:

    run logger(input "Connection failure").
        
    run logger(input error-status:get-message(1)).
    return.

end.
                  
vhSocket:SET-READ-RESPONSE-PROCEDURE('getResponse').

assign c-json = '~{ ~"buscarProdutos~" : ~{~} ~}'. 
    
RUN PostRequest (INPUT 'produtos/integracaoProdutos',
                 input c-json).
             
WAIT-FOR READ-RESPONSE OF vhSocket. 
vhSocket:DISCONNECT() NO-ERROR.
DELETE OBJECT vhSocket.

procedure logger:

    def input param log as char no-undo.

    put unformatted "[" + STRING(TIME, "HH:MM:SS") + "] ".
    put unformatted log skip.

end.
             
PROCEDURE getResponse:

    DEFINE VARIABLE vcWebResp    AS longchar         NO-UNDO.  
    DEFINE VARIABLE lSucess      AS LOGICAL          NO-UNDO.
    DEFINE VARIABLE mResponse    AS MEMPTR           NO-UNDO.
    define variable i-delay      as integer          no-undo.    
    /* variavel utilizada por causa do delay no socket, nao retirar */     
    
    IF vhSocket:CONNECTED() = FALSE THEN do:
        run logger( input "Not Connected").
        RETURN.
    END.
    
    lSucess = TRUE.
                            
   DO WHILE vhSocket:GET-BYTES-AVAILABLE() > 0:
        SET-SIZE(mResponse) = vhSocket:GET-BYTES-AVAILABLE() + 1.
        SET-BYTE-ORDER(mResponse) = BIG-ENDIAN.
        vhSocket:READ(mResponse,1,1,vhSocket:GET-BYTES-AVAILABLE()).
        vcWebResp = vcWebResp + GET-STRING(mResponse,1).

        status default "processando...".
        
        assign i-delay = 0.
        
        do i-delay = 1 to 500:
            i-delay = i-delay + 1.
        end.
    END.

    output to value("/home/kbase/logs/jsonErros/" + filename).
    export vcWebResp.
    output close.

    If Num-entries(vcWebResp,"~{") >= 1 Then 
	Assign vcWebResp = Substring(vcWebResp,Index(vcWebResp,"~{",1),(Length(vcWebResp))).
    Else 
	run logger(input "Não retornou nada").

    dataset produtos:read-json("longchar",vcWebResp,"empty") no-error.

    /* if error-status:error then do:

	output to value("/home/kbase/logs/jsonErros/" + filename).
	export vcWebResp.
	output close.

    end. */

    run atualiza-produto.
END.

PROCEDURE PostRequest:

    DEFINE VARIABLE vcRequest      AS Longchar.
    DEFINE VARIABLE mRequest       AS MEMPTR.
    DEFINE INPUT PARAMETER postUrl AS CHAR. 
    DEFINE input PARAMETER postData AS Longchar.  
    
    vcRequest =
             'POST /' +
             postUrl +
             ' HTTP/1.1~r~n' +
             ' HOST: ' + vchost + ':' + vcport + '~r~n' +
             'Content-Type: application/json~r~n' +
                            'Content-Length: ' + string(LENGTH(postData)) +
             '~r~n' + '~r~n' +
             postData.

    SET-SIZE(mRequest)            = 0.
    SET-SIZE(mRequest)            = LENGTH(vcRequest) + 1.
    SET-BYTE-ORDER(mRequest)      = BIG-ENDIAN.
    PUT-STRING(mRequest,1)        = vcRequest .
         
    vhSocket:WRITE(mRequest, 1, LENGTH(vcRequest)).

END PROCEDURE.

procedure atualiza-produto:

def var i-cont as int initial 0 no-undo.

for each tt-produtos no-lock:
    i-cont = i-cont + 1.
end.

run logger(input (string(i-cont) + " produtos recebidos")).

run /admcom/progr/portal_valida_produto.p (output table tt-erros, input table tt-produtos).

for each tt-produtos no-lock:

    if can-find(first tt-erros
		where tt-erros.cod-target = tt-produtos.cod-produto)
		then next.

    if not can-find(first produ
                    where produ.procod = tt-produtos.cod-produto) then do:
                
	run logger(input ("Cadastrar produto " + string(tt-produtos.cod-produto))).

        create produ.
        assign produ.procod        = tt-produtos.cod-produto
               produ.itecod        = tt-produtos.cod-produto
               produ.proipiper     = if tt-produtos.aliquota-icm       <> ? then tt-produtos.aliquota-icm               else 0
               produ.proclafis     = if tt-produtos.cod-classific-fisc <> ? then string(tt-produtos.cod-classific-fisc) else ""
               produ.codfis        = if tt-produtos.cod-classific-fisc <> ? then tt-produtos.cod-classific-fisc         else 0
               produ.proindice     = if tt-produtos.cod-barras         <> ? then string(tt-produtos.cod-barras) 	else ""
               produ.corcod        = if tt-produtos.cod-cor 	       <> ? then string(tt-produtos.cod-cor)		else ""
               produ.catcod        = if tt-produtos.cod-departamento   <> ? then tt-produtos.cod-departamento   else 0
               produ.descontinuado = if tt-produtos.descontinuado      <> ? then tt-produtos.descontinuado      else false
               produ.pronom        = if tt-produtos.desc-produto       <> ? then tt-produtos.desc-produto       else ""
               produ.pronomc       = if tt-produtos.desc-produto-abrev <> ? then tt-produtos.desc-produto-abrev else ""
               produ.etccod        = if tt-produtos.cod-estac	       <> ? then tt-produtos.cod-estac	        else 0	
               produ.fabcod        = if tt-produtos.cod-fabricante     <> ? then tt-produtos.cod-fabricante     else 0
               produ.opentobuy     = if tt-produtos.open-to-buy	       <> ? then tt-produtos.open-to-buy        else false
               produ.prorefter     = if tt-produtos.referencia	       <> ? then tt-produtos.referencia       else ""
               produ.clacod        = if tt-produtos.cod-subclasse      <> ? then tt-produtos.cod-subclasse    else 0
               produ.temp-cod      = if tt-produtos.cod-temp	       <> ? then tt-produtos.cod-temp	      else 0
               produ.procvcom      = if tt-produtos.volume 	       <> ? then tt-produtos.volume 	      else 1
	       produ.pvp	   = if tt-produtos.preco-fornecedor   <> ? then tt-produtos.preco-fornecedor else 0
	       produ.protam	   = if tt-produtos.montagem          	  then "Sim" else "Nao"
	       produ.proipival	   = if tt-produtos.pedido-especial 	  then 1     else 0
	       produ.prodtcad      = date(substring(tt-produtos.dt-cadastro,1,10))
	       produ.datfimvida    = date(substring(tt-produtos.dt-fim-vida,1,10))
	       produ.datexp        = today.

	
             
        if tt-produtos.ativo = yes then
            assign produ.proseq = 0.
        else
            assign produ.proseq = 99.

        for each mixmprod
            where mixmprod.procod = tt-produtos.cod-produto
                exclusive-lock:
        
            delete mixmprod.

        end.

        for each tt-mix
           where tt-mix.cod-produto = tt-produtos.cod-produto no-lock:

            find first mixmprod
                 where mixmprod.procod   = tt-mix.cod-produto
                   and mixmprod.codgrupo = tt-mix.cod-mix
                   and mixmprod.etbcod         = tt-mix.etbcod
                       exclusive-lock no-error.

            if avail mixmprod then
                assign mixmprod.estmin   = tt-mix.estmin
                       mixmprod.estmax   = tt-mix.estmax
                       mixmprod.etbcod   = tt-mix.etbcod
                       mixmprod.situacao = tt-mix.ativo.
            else do:

                create mixmprod.
                assign mixmprod.procod   = tt-mix.cod-produto
                       mixmprod.codgrupo = tt-mix.cod-mix
                       mixmprod.estmin   = tt-mix.estmin
                       mixmprod.estmax   = tt-mix.estmax
                       mixmprod.situacao = tt-mix.ativo
                       mixmprod.dtcad    = today
                       mixmprod.etbcod   = tt-mix.etbcod.
            end.            
        end.
            
        find first fabri where fabri.fabcod = produ.fabcod no-lock no-error.

        if avail fabri then
            produ.prozort = fabri.fabfant.

    end.
    else do:

        find first produ
             where produ.procod = tt-produtos.cod-produto
                   exclusive-lock no-error.

        if avail produ then do:
	   
 	    run logger(input ("Atualizar produto " + string(tt-produtos.cod-produto))).
            
            assign  produ.proipiper     = if tt-produtos.aliquota-icm	    <> ? then tt-produtos.aliquota-icm 		     else 0
                    produ.proclafis     = if tt-produtos.cod-classific-fisc <> ? then string(tt-produtos.cod-classific-fisc) else "0"
                    produ.codfis        = if tt-produtos.cod-classific-fisc <> ? then tt-produtos.cod-classific-fisc 	     else 0
                    produ.proindice     = if tt-produtos.cod-barras 	    <> ? then string(tt-produtos.cod-barras)	     else "0"
                    produ.corcod        = if tt-produtos.cod-cor 	    <> ? then string(tt-produtos.cod-cor)     else ""
                    produ.catcod        = if tt-produtos.cod-departamento   <> ? then tt-produtos.cod-departamento    else 0
                    produ.descontinuado = if tt-produtos.descontinuado      <> ? then tt-produtos.descontinuado       else false
                    produ.pronom        = if tt-produtos.desc-produto	    <> ? then tt-produtos.desc-produto        else ""
                    produ.pronomc       = if tt-produtos.desc-produto-abrev <> ? then tt-produtos.desc-produto-abrev  else ""
                    produ.etccod        = if tt-produtos.cod-estac	    <> ? then tt-produtos.cod-estac           else 0
                    produ.fabcod        = if tt-produtos.cod-fabricante     <> ? then tt-produtos.cod-fabricante      else 0
                    produ.opentobuy     = if tt-produtos.open-to-buy	    <> ? then tt-produtos.open-to-buy         else false
                    produ.prorefter     = if tt-produtos.referencia	    <> ? then tt-produtos.referencia          else ""
                    produ.clacod        = if tt-produtos.cod-subclasse	    <> ? then tt-produtos.cod-subclasse       else 0
                    produ.temp-cod      = if tt-produtos.cod-temp	    <> ? then tt-produtos.cod-temp            else 0
                    produ.procvcom      = if tt-produtos.volume		    <> ? then tt-produtos.volume              else 1
		    produ.pvp		= if tt-produtos.preco-fornecedor   <> ? then tt-produtos.preco-fornecedor    else 0
		    produ.protam	= if tt-produtos.montagem 		 then "Sim" else "Nao"
		    produ.proipival	= if tt-produtos.pedido-especial	 then 1 else 0
		    produ.prodtcad      = date(substring(tt-produtos.dt-cadastro,1,10))
		    produ.datfimvida    = date(substring(tt-produtos.dt-fim-vida,1,10))
		    produ.datexp        = today.
               


            if tt-produtos.ativo = yes then
                 assign produ.proseq = 0.
            else
                 assign produ.proseq = 99.

            for each mixmprod
                where mixmprod.procod = tt-produtos.cod-produto
                    exclusive-lock:

                delete mixmprod.

            end.
            
            for each tt-mix
               where tt-mix.cod-produto = tt-produtos.cod-produto no-lock:

                find first mixmprod
                     where mixmprod.procod   = tt-mix.cod-produto
                       and mixmprod.codgrupo = tt-mix.cod-mix
                       and mixmprod.etbcod   = tt-mix.etbcod
                           exclusive-lock no-error.

                if avail mixmprod then
                    assign mixmprod.estmin   = tt-mix.estmin
                           mixmprod.estmax   = tt-mix.estmax
                           mixmprod.situacao = tt-mix.ativo
                           mixmprod.etbcod   = tt-mix.etbcod.
                else do:
                    create mixmprod.
                    assign mixmprod.procod   = tt-mix.cod-produto
                           mixmprod.codgrupo = tt-mix.cod-mix
                           mixmprod.estmin   = tt-mix.estmin
                           mixmprod.estmax   = tt-mix.estmax
                           mixmprod.dtcad    = today
                           mixmprod.situacao = tt-mix.ativo
                           mixmprod.etbcod   = tt-mix.etbcod.
                end.
            end.
        
            find first fabri where 
                       fabri.fabcod = produ.fabcod no-lock no-error.

            if avail fabri then
                produ.prozort = fabri.fabfant.
        end.
    end.

    for each procaract 
        where procaract.procod = tt-produtos.cod-produto 
        exclusive-lock:
        
        delete procaract.
 
    end.

    for each tt-caracteristica 
        where tt-caracteristica.cod-produto = tt-produtos.cod-produto no-lock:

        find first subcarac
             where subcarac.subdes = tt-caracteristica.subcaracteristica
                    no-lock no-error.

        if avail subcarac then do:
            if not can-find(first procaract
                            where procaract.procod = tt-caracteristica.cod-produto
                              and procaract.subcod = subcarac.subcod) then do:
                   
                create procaract.
                assign procaract.procod = tt-caracteristica.cod-produto
                       procaract.subcod = subcarac.subcod
                       procaract.dtcad  = today
                       procaract.dtexp  = today.
            end.
        end.
    end.
    
    if not can-find (first prodecom
                     where prodecom.procod = tt-produtos.cod-produto) then do:
                         
        create prodecom.
        assign prodecom.procod       = tt-produtos.cod-produto
               prodecom.altura       = tt-produtos.altura-produto
               prodecom.codCatFisKPL = tt-produtos.cod-cat-fiscal
               prodecom.desccom      = tt-produtos.desc-ecommerce
               prodecom.estmin       = tt-produtos.estoq-minimo
               prodecom.largura      = tt-produtos.largura-produto
               prodecom.peso         = tt-produtos.peso-produto
               prodecom.profund      = tt-produtos.profundidade-prod
               prodecom.voltagem     = tt-produtos.voltagem-produto
               prodecom.visivel      = yes.
    end.
    else do:
        find first prodecom
             where prodecom.procod = tt-produtos.cod-produto
                   exclusive-lock no-error.

        if avail prodecom then do:   
            assign prodecom.altura       = tt-produtos.altura-produto
                   prodecom.codCatFisKPL = tt-produtos.cod-cat-fiscal
                   prodecom.desccom      = tt-produtos.desc-ecommerce
                   prodecom.estmin       = tt-produtos.estoq-minimo
                   prodecom.largura      = tt-produtos.largura-produto
                   prodecom.peso         = tt-produtos.peso-produto
                   prodecom.profund      = tt-produtos.profundidade-prod
                   prodecom.voltagem     = tt-produtos.voltagem-produto
		   prodecom.visivel      = yes.                   
        end.
    end.
    
    if tt-produtos.cod-produto-pai <> ? then do:
        if not can-find (first produpai
                         where produpai.itecod = int(tt-produtos.cod-produto-pai)) then do:

            create produpai.
            assign produpai.itecod    = int(tt-produtos.cod-produto-pai)
                   produpai.catcod    = tt-produtos.cod-departamento 
                   produpai.pronom    = tt-produtos.desc-produto  
                   produpai.fabcod    = tt-produtos.cod-fabricante
                   produpai.clacod    = tt-produtos.cod-subclasse 
                   produpai.temp-cod  = tt-produtos.cod-estac    
                   produpai.prorefter = string(tt-produtos.referencia)  
                   produpai.datexp    = today.                                 
        end.
        else do:
            find first produpai
                 where produpai.itecod = int(tt-produtos.cod-produto-pai)
                       exclusive-lock no-error.

            if avail produpai then do:
                assign produpai.catcod    = tt-produtos.cod-departamento
                       produpai.pronom    = tt-produtos.desc-produto
                       produpai.fabcod    = tt-produtos.cod-fabricante
                       produpai.clacod    = tt-produtos.cod-subclasse
                       produpai.temp-cod  = tt-produtos.cod-estac
                       produpai.prorefter = string(tt-produtos.referencia)
                       produpai.datexp    = today.      
            end.
        end.
    end.
    
    for each estab no-lock:
        if not can-find (first estoq
                         where estoq.etbcod = estab.etbcod
                           and estoq.procod = tt-produtos.cod-produto) then do:
            create estoq.
            assign estoq.etbcod     = estab.etbcod
                   estoq.procod     = tt-produtos.cod-produto
                   estoq.estcusto   = tt-produtos.preco-custo
                   estoq.estdtcus   = today
                   estoq.estvenda   = tt-produtos.preco-venda
                   estoq.estdtven   = today
                   estoq.dtaltpreco = today
                   estoq.estideal   = -1
                   estoq.datexp     = today.                           
        end.
        /*else do:
            find first estoq
                 where estoq.etbcod = estab.etbcod
                   and estoq.procod = tt-produtos.cod-produto
                       exclusive-lock no-error.
            if avail estoq then do:
                assign estoq.estcusto   = tt-produtos.preco-custo
                       estoq.estdtcus   = today
                       estoq.estvenda   = tt-produtos.preco-venda
                       estoq.estdtven   = today
                       estoq.dtaltpreco = today
                       estoq.estideal   = -1
                       estoq.datexp     = today.            
            end.
        end.*/
    end.

    find first produaux
         where produaux.procod     = tt-produtos.cod-produto
           and produaux.nome_campo = "TempoGar"
               exclusive-lock no-error.

    if avail produaux then do:
        assign produaux.valor_campo = string(tt-produtos.tempo-garantia)
	       produaux.datexp	    = today.
    end.
    else if tt-produtos.tempo-garantia <> 0 then do:
        create produaux.
	assign produaux.valor_campo = string(tt-produtos.tempo-garantia)
	       produaux.nome_campo  = "TempoGar"
	       produaux.tipo_campo  = ""
	       produaux.exportar    = yes
	       produaux.datexp	    = today
	       produaux.procod      = tt-produtos.cod-produto.
    end.

    if tt-produtos.cod-pack <> ? and tt-produtos.cod-pack <> 0 then do:

        find first produaux
             where produaux.procod     = tt-produtos.cod-produto
               and produaux.nome_campo = "Pack"
                   exclusive-lock no-error.

        if not avail produaux then do:
            create produaux.
            assign produaux.procod      = tt-produtos.cod-produto
                   produaux.nome_campo  = "Pack"
                   produaux.tipo_campo  = ""
                   produaux.valor_campo = string(tt-produtos.cod-pack).
        end.
        else
            assign produaux.valor_campo = string(tt-produtos.cod-pack).
    
    end.
    
    find first produaux
         where produaux.procod     = tt-produtos.cod-produto
           and produaux.nome_campo = 'exporta-e-com'
               exclusive-lock no-error.

    if not avail produaux then do:
        create produaux.
        assign produaux.procod      = tt-produtos.cod-produto
               produaux.nome_campo  = 'exporta-e-com'
               produaux.tipo_campo  = 'logical'
               produaux.valor_campo = string(tt-produtos.exporta-ecommerce).   
    end.
    else
        assign produaux.valor_campo = string(tt-produtos.exporta-ecommerce). 
end.

for each tt-produtos:

  find first produ 
    where produ.procod = tt-produtos.cod-produto no-lock no-error.

  if not avail produ then
